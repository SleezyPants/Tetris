import numpy as np
import pygame
from pygame.locals import *
import random
import csv
pygame.init()


#Steine die zur Wahl stehen, Hero und Smashboy einzeln weil sonst inhomogenes Array, was zu einem Fehler führt
stein_auswahl=np.array([[[0,0,1],
                         [1,1,1]],
                        [[1,0,0],
                         [1,1,1]],
                        [[1,1,0],
                         [0,1,1]],
                        [[0,1,1],
                         [1,1,0]],
                        [[0,1,0],
                         [1,1,1]]])
stein_hero=np.array([[1,1,1,1]])
stein_smashboy=np.array([[1,1],
                         [1,1]])
leere_reihe=np.array([[0,0,0,0,0,0,0,0,0,0]])


#Variablen definieren
Multiplikator=20
W=10
H=20
FPS=1
FPS_alt=FPS
steinaktiv=True
spielaktiv=True
spiel_verloren=False
stein_schnell=False
global punkte
punkte=0
level=1
global new_score
new_score=[]

#Spielfeld anlegen und mit Nullen füllen
spielfeld=np.zeros((H,W), dtype=int)

def stein_runter():
    global stein_schnell
    global FPS_alt
    global FPS
    stein_schnell=True
    FPS_alt=FPS
    FPS=20

def reihe_vollst():
    """
    Überprüfung ob eine Reihe vollständig ist (Summe entlang x-Achse=10)
    Return Index der Reihen deren Summe=10 ist
    """
    reihe=np.sum(spielfeld, axis=1, dtype=np.int32)
    indizes=np.array([[]], dtype=int)
    for n in range(len(reihe)):
        if reihe[n]>=10:
            indizes=np.append(indizes, n)
    return indizes

def kollision_boden():
    """
    Überprüfung ob Kollision mit Boden
    """
    if y_pos==H-y_size:
        return True
        print("Kollision Boden")
    else:
        return False

def kollision():
    """
    Kollisionsabfrage mit anderen Steinen
    return True falls Kollision, return False wenn Schleife ohne Kollision durchlaufen wurde
    """
    for y1 in range(len(stein)):
        if y1+1<y_size:
            continue
        else:
            for x1 in range(len(stein[0])):
                if stein[y1][x1]==0 and stein[y1-1][x1]==0:
                    feld_y=y_pos-y1
                    feld_x=x_pos+x1
                    if spielfeld[feld_y][feld_x]==1:
                        print("Kollision1")
                        return True
                    
                elif stein[y1][x1]==0:
                    feld_y=y_pos+y1
                    feld_x=x_pos+x1
                    if spielfeld[feld_y][feld_x]==1:
                        print("Kollision2")
                        return True 
                try:
                    if stein[y1][x1]==1:
                        feld_y1=y_pos+y1
                        feld_x1=x_pos+x1
                        if spielfeld[feld_y1+1][feld_x1]==1:
                            print("Kollision3")
                            return True
                except IndexError:
                    print("IndexError")
    return False
                        
def subAtPos(mat1, mat2, xypos):
    """
    Substract two matrices of different sizes in place, offset by xy coordinates
    Usage:
      - mat1: base matrix
      - mat2: add this matrix to mat1
      - xypos: tuple (x,y) containing coordinates
    """
    x, y = xypos
    ysize, xsize = mat2.shape
    xmax, ymax = (x + xsize), (y + ysize)
    mat1[y:ymax, x:xmax] -= mat2
    return mat1

def addAtPos(mat1, mat2, xypos):
    """
    Add two matrices of different sizes in place, offset by xy coordinates
    Usage:
      - mat1: base matrix
      - mat2: add this matrix to mat1
      - xypos: tuple (x,y) containing coordinates
    """
    x, y = xypos
    ysize, xsize = mat2.shape
    xmax, ymax = (x + xsize), (y + ysize)
    mat1[y:ymax, x:xmax] += mat2
    return mat1

#Farben für Pygame festlegen
SCHWARZ = ( 0, 0, 0)
WEISS   = ( 255, 255, 255)
ROT     = ( 255, 0, 0)
GRUEN   = ( 0, 255, 0)
BLAU    = ( 0, 0, 255)

#Fenster definieren
fenster=pygame.display.set_mode((Multiplikator*W, Multiplikator*H))
pygame.display.set_caption("Tetris in Python")
clock=pygame.time.Clock()

#Hintergrundmusik abspielen
pygame.mixer.music.load('tetris-theme.mp3')
pygame.mixer.music.play(-1,0.0)
pygame.mixer.music.set_volume(.2)

#Hauptschleife für aktives Spiel
while spielaktiv==True:
    
   
    #Definition von Variablen
    steinaktiv=True
    x_pos=3
    y_pos=0
    y_bewegung=1
    pos=(x_pos, y_pos)
    
      
    #Auswahl des Spielsteins und einfügen in Spielfeld
    stein_random=random.randint(1,7)
    if stein_random>=1 and stein_random<=5:
        stein=random.choice(stein_auswahl)
    elif stein_random==6:
        stein=stein_hero
    elif stein_random==7:
        stein=stein_smashboy
    spielfeld=addAtPos(spielfeld, stein, pos)
    print(spielfeld)
    
    #Hauptschleife für aktuell aktiven Spielstein
    while steinaktiv==True:
        y_size, x_size = stein.shape
        
        #Beenden des Spiels durch Spieler-Input
        for event in pygame.event.get():
            if event.type==pygame.QUIT or event.type==pygame.KEYDOWN and event.key==pygame.K_ESCAPE:
                print("Spieler hat das Spiel beendet")
                steinaktiv=False
                spielaktiv=False
                
            #Überprüfung auf gedrückte Taste               
            if event.type==pygame.KEYDOWN:
                
                #Rotation des Spielsteins durch Spieler-Input
                if event.key==pygame.K_UP and x_pos<=W-x_size-1 and kollision()==False:
                    pos=(x_pos, y_pos)
                    spielfeld=subAtPos(spielfeld,stein,pos)
                    stein=np.rot90(stein, 1)
                    y_size, x_size = stein.shape
                    spielfeld=addAtPos(spielfeld,stein,pos)
                    print(spielfeld)
                    
                #Bewegung des Spielsteins nach links durch Spieler-Input und Kollisionsabfrage linker Rand
                elif event.key==pygame.K_LEFT and x_pos>=1:
                    spielfeld=subAtPos(spielfeld,stein,pos)
                    x_pos-=1
                    pos=(x_pos, y_pos)
                    spielfeld=addAtPos(spielfeld,stein,pos)
                    print(spielfeld)
                    
                #Bewegung des Spielsteins nach rechts durch Spieler-Input und Kollisionsabfrage rechter Rand
                elif event.key==pygame.K_RIGHT and x_pos<=W-x_size-1:
                    spielfeld=subAtPos(spielfeld,stein,pos)
                    x_pos+=1
                    pos=(x_pos, y_pos)
                    spielfeld=addAtPos(spielfeld,stein,pos)
                    print(spielfeld)
                    
                elif event.key==pygame.K_DOWN:
                    stein_runter()

        #Automatische Bewegung des Spielsteins nach unten
        if y_pos<=H-(y_size+1):
            spielfeld=subAtPos(spielfeld,stein,pos)
            y_pos+=y_bewegung
            pos=(x_pos, y_pos)
            spielfeld=addAtPos(spielfeld,stein,pos)
            print(spielfeld)
            
                 
        #Kollisionsabfrage mit Boden des Spielfelds   
        if kollision_boden():
            stein_schnell=False
            FPS=FPS_alt
            punkte+=1
            y_bewegung=0
            steinaktiv=False
            
        #Kollisionsabfrage mit anderen Steinen
        if kollision():
            stein_schnell=False
            FPS=FPS_alt
            punkte+=1
            y_bewegung=0
            steinaktiv=False
            
        #Überprüfen ob eine Reihe vollständig ist
        if (kollision() or kollision_boden()) or (kollision() and kollision_boden()):
            reihe_entf_index=reihe_vollst()
            for i in range(len(reihe_entf_index)):
                if reihe_entf_index[i]:
                    punkte+=10
                    spielfeld=np.delete(spielfeld, reihe_entf_index[i], axis=0)
                    spielfeld=np.vstack([leere_reihe, spielfeld])
        
        #Spiel schneller machen, mit steigender Punktzahl
        if not stein_schnell:
            level=min(punkte, 225)//25+1
            FPS=level
    
             
        fenster.fill(WEISS)
    
        #Punktestand und Level ausgeben:
        ausgabetext="Score: " + str(punkte)
        font=pygame.font.SysFont(None, 20)
        text=font.render(ausgabetext, True, SCHWARZ)
        fenster.blit(text, [10, 10])
        
        text="Level: " + str(level)
        font=pygame.font.SysFont(None, 20)
        text=font.render(text, True, SCHWARZ)
        fenster.blit(text, [140, 10])
    
        #Spielfeld/figuren zeichnen
        for y2 in range(len(spielfeld)):
            for x2 in range(len(spielfeld[0])):
                if spielfeld[y2][x2]>=1:
                    pygame.draw.rect(fenster, BLAU,[x2*Multiplikator, y2*Multiplikator, 20, 20])
        
        #Abfrage ob Spiel verloren wurde und Spiel Neustart
        if kollision() and y_pos==1:
            text_verloren="Game Over!"
            font=pygame.font.SysFont(None, 40)
            font2=pygame.font.SysFont(None, 25)
            text_verloren=font.render(text_verloren, True, ROT)
            fenster.blit(text_verloren, [20, 180])
            pygame.display.flip()
            
            #Input des Namens für Highscore
            #Definition benötigter Variablen
            input_box = pygame.Rect(40, 220, 120, 32)
            color_inactive = pygame.Color('lightskyblue3')
            color_active = pygame.Color('dodgerblue2')
            color = color_inactive
            active = False
            name = ''
            done = False
            anzahl_zeichen=-1
                        
            while not done:
                pygame.draw.rect(fenster, color, input_box, 2)
                pygame.display.flip()
                for event in pygame.event.get():
                    if event.type == pygame.QUIT or event.type==pygame.KEYDOWN and event.key==pygame.K_ESCAPE:
                        done = True
                    if event.type==pygame.MOUSEBUTTONDOWN:
                        if input_box.collidepoint(event.pos):
                            active = not active
                        else:
                            active = False
                        color = color_active if active else color_inactive
                    if event.type == pygame.KEYDOWN:
                        if active:
                            if event.key == pygame.K_RETURN or anzahl_zeichen==3:
                                print(name)
                                new_score.append(int(punkte))
                                new_score.append(str(name))
                                new_score = tuple(new_score)
                                print("New Score: ", new_score)
                                name=""
                                done = True
                            elif event.key == pygame.K_BACKSPACE:
                                name = name[:-1]
                            else:
                                anzahl_zeichen+=1
                                name += event.unicode
                    txt_surface = font.render(name, True, SCHWARZ)
                    fenster.blit(txt_surface, (input_box.x+5, input_box.y+5))
                    pygame.display.flip()
                    
            #Einlesen der Highscore Datei, Einfügen des neuen Score, Sortieren nach score und Schreiben in Datei
            values = list()
            fertig=False
            while not fertig:
                with open("highscore.csv") as hs_datei:
                    zeilennummer=0
                    csv_reader_object=csv.reader(hs_datei)
                    for row in csv_reader_object:
                        if zeilennummer==0:
                            print("Zeile 0")
                            zeilennummer+=1
                        else:
                            neues_element=tuple(row)
                            values.append(neues_element)
                            zeilennummer+=1
                values.append(new_score)
                print(values)
                dtype=[("score", int), ("name", 'U3')]
                highscore=np.asanyarray(values, dtype=dtype)
                print(highscore)
                highscore=np.sort(highscore, axis=0, order="score", stable=True)
                print(highscore)
                highscore=highscore[::-1]
                print("Sorted:\n",highscore)
                with open("highscore.csv", "w", newline="") as hs_datei:
                    writer=csv.writer(hs_datei)
                    writer.writerow(["score","name"])
                    for i in range(len(highscore)):
                        writer.writerow(highscore[i])
                fertig=True
                
            #Grafische Ausgabe der Highscores
            fenster.fill(WEISS)
            text_hs="Highscores:"
            text_hs=font2.render(text_hs, True, SCHWARZ)
            fenster.blit(text_hs, [50, 20])
            for i in range(len(highscore)):
                highscore_ausgabe=str(highscore[i])
                text_hs_ausgabe=font2.render(highscore_ausgabe, True, SCHWARZ)
                fenster.blit(text_hs_ausgabe,[50, 20*i+40])
                pygame.display.flip()
                
            #Warten auf Input und Neustart des Spiels
            text_esc="Press ESC to quit"
            text_space="or Space to restart"
            text_esc=font2.render(text_esc, True, SCHWARZ)
            text_space=font2.render(text_space, True, SCHWARZ)
            fenster.blit(text_esc, [20, 360])
            fenster.blit(text_space, [20, 380])
            pygame.display.flip()
            steinaktiv=False
            spiel_verloren=True
            pygame.event.clear()
            while spiel_verloren==True:
                pygame.init()
                event = pygame.event.wait()
                if event.type == QUIT or event.type==pygame.KEYDOWN and event.key==pygame.K_ESCAPE:
                    spielaktiv=False
                    pygame.quit()
                elif event.type == pygame.KEYDOWN:
                    if event.key == K_SPACE:
                        print("Spiel Neustart")
                        spielfeld=np.zeros((H,W), dtype=int)
                        fenster.fill(WEISS)
                        spiel_verloren=False
                        spiel_aktiv=True
                        stein_aktiv=True
                        punkte=0
                        FPS=1
                        new_score=[]
                        
                        

    #Fenster aktualisieren
        pygame.display.flip()
        clock.tick(FPS)
    
pygame.quit()
